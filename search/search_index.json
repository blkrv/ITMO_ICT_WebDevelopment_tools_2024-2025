{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e:</p> <ul> <li>\ud83d\udcda \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0445 (\u041b\u0430\u04311, \u041b\u0430\u04312, \u041b\u0430\u04313)</li> <li>\ud83d\udee0 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445</li> </ul> <p>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0432 \u043c\u0435\u043d\u044e \u0441\u043b\u0435\u0432\u0430 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"lab1/","title":"AuthHandler","text":"<p>\u041a\u043b\u0430\u0441\u0441 AuthHandler \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0443\u044e JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043f\u0430\u0440\u043e\u043b\u044f\u043c\u0438:</p> <p>\u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f: get_password_hash \u2014 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0445\u0435\u0448 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432 \u0411\u0414.</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f: verify_password \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0441 \u0445\u0435\u0448\u0435\u043c.</p> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT: encode_token \u2014 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0442\u043e\u043a\u0435\u043d \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u0440\u043e\u043a\u043e\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f 24 \u0447\u0430\u0441\u0430.</p> <p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 JWT: decode_token \u2014 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0442\u043e\u043a\u0435\u043d\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: get_user \u2014 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0442\u043e\u043a\u0435\u043d\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 FastAPI \u0447\u0435\u0440\u0435\u0437 HTTPBearer.</p> <pre><code>import datetime\nimport os\nfrom fastapi import Security, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom passlib.context import CryptContext\nimport jwt\nfrom starlette import status\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    secret = os.getenv('LAB1_JWT_KEY')\n\n    # \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd)\n\n    # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 JWT\n    def encode_token(self, sub_data):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24),\n            'iat': datetime.datetime.utcnow(),\n            'sub': str(sub_data)\n        }\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail='Expired signature')\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail='Invalid token')\n\n    # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0442\u043e\u043a\u0435\u043d\u0430\n    def get_user(self, auth: HTTPAuthorizationCredentials = Security(security)):\n        token_data = self.decode_token(auth.credentials)\n        if token_data is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not validate credentials')\n        return int(token_data)\n\nauth_handler = AuthHandler()\n</code></pre>"},{"location":"lab1/#alembic","title":"Alembic","text":"<p>Alembic \u2014 \u044d\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u043d\u0430 SQLAlchemy/SQLModel.</p> <p>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c, \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438 \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u0445\u0435\u043c\u044b \u0411\u0414 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043b\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e.</p> <p>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0431\u0430\u0437\u044b \u043f\u0440\u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u043b\u0438 \u0441\u0432\u044f\u0437\u0438.</p> <p>\u041f\u0440\u043e\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f: Alembic \u043d\u0443\u0436\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0431\u0435\u0437\u0431\u043e\u043b\u0435\u0437\u043d\u0435\u043d\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0432 \u043c\u043e\u0434\u0435\u043b\u044f\u0445.</p>"},{"location":"lab1/#hackathon","title":"Hackathon","text":"<p>\u042d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0432\u0430\u0433\u0435\u0440\u0430 \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b \u0442\u0443\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b get, post, pathc, delete</p> <p></p>"},{"location":"lab2/","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044e \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 100_000_000:</p> <ol> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 (<code>asyncio</code>)</li> <li>\u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 (<code>multiprocessing</code>)</li> <li>\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 (<code>threading</code>)</li> </ol>"},{"location":"lab2/#1","title":"1. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434","text":"<pre><code>import asyncio\nimport time\n\nasync def calculate_sum(start, end):\n    return sum(range(start, end))\n\nasync def main():\n    num_tasks = 4\n    chunks = 100_000_000 // num_tasks\n    start_time = time.time()\n\n    tasks = [asyncio.create_task(calculate_sum(i*chunks+1, (i+1)*chunks+1))\n             for i in range(num_tasks)]\n\n    results = await asyncio.gather(*tasks)\n    total_sum = sum(results)\n\n    print(\"Async sum:\", total_sum)\n    print(f\"Execution time: {time.time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 asyncio \u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b.</p> <p>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 I/O, \u043d\u043e \u043d\u0435 \u0434\u0430\u0451\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043d\u0430 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: ~0.79 \u0441.</p>"},{"location":"lab2/#2","title":"2. \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434","text":"<pre><code>import time\nimport multiprocessing\n\ndef calculate_sum(start, end, result):\n    result.append(sum(range(start, end)))\n\ndef main():\n    num_processes = 4\n    chunks = 100_000_000 // num_processes\n    start_time = time.time()\n\n    manager = multiprocessing.Manager()\n    result = manager.list()\n\n    processes = [multiprocessing.Process(target=calculate_sum,\n                                         args=(i*chunks+1, (i+1)*chunks+1, result))\n                 for i in range(num_processes)]\n\n    for p in processes:\n        p.start()\n    for p in processes:\n        p.join()\n\n    total_sum = sum(result)\n    print(\"Total sum:\", total_sum)\n    print(f\"Execution time: {time.time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:</p> <p>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>\u0425\u043e\u0440\u043e\u0448\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: ~0.43 \u0441.</p>"},{"location":"lab2/#3","title":"3. \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434","text":"<pre><code>import time\nimport threading\n\ndef calculate_sum(start, end, result):\n    result.append(sum(range(start, end)))\n\ndef main():\n    num_threads = 4\n    chunks = 100_000_000 // num_threads\n    start_time = time.time()\n\n    result = []\n    threads = [threading.Thread(target=calculate_sum,\n                                args=(i*chunks+1, (i+1)*chunks+1, result))\n               for i in range(num_threads)]\n\n    for t in threads:\n        t.start()\n    for t in threads:\n        t.join()\n\n    total_sum = sum(result)\n    print(\"Total sum:\", total_sum)\n    print(f\"Execution time: {time.time() - start_time} seconds\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.</p> <p>\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447.</p> <p>\u041d\u0430 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043d\u0435\u0442 \u0438\u0437-\u0437\u0430 GIL.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: ~0.90 \u0441</p>"},{"location":"lab2/#_2","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u0414\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing.</p> <p>\u0414\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 asyncio \u0438\u043b\u0438 threading.</p> <p>\u0412\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u0430\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 5000000050000000</p>"},{"location":"lab3/","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 Celery \u0438 FastAPI","text":"<p>\u041f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 Docker Compose:</p>"},{"location":"lab3/#_1","title":"\u0421\u0435\u0440\u0432\u0438\u0441\u044b","text":"<ul> <li>db \u2013 PostgreSQL \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>redis \u2013 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f Celery.</li> <li>parser \u2013 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446.</li> <li>hackathon \u2013 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</li> <li>celery_worker \u2013 \u0432\u043e\u0440\u043a\u0435\u0440 Celery \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447.</li> </ul>"},{"location":"lab3/#celery","title":"Celery \u0437\u0430\u0434\u0430\u0447\u0438","text":""},{"location":"lab3/#1-parse_url_tasks","title":"1. <code>parse_url_tasks</code>","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>httpx.AsyncClient</code> \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 HTML.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTML \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441 <code>parser</code> \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul>"},{"location":"lab3/#2-parse_all_urls","title":"2. <code>parse_all_urls</code>","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a URL \u0438\u0437 <code>urls</code>.</li> <li>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 <code>_parse_url</code> \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</li> </ul>"},{"location":"lab3/#fastapi","title":"FastAPI \u0440\u043e\u0443\u0442\u044b","text":""},{"location":"lab3/#post-parse-url","title":"<code>POST /parse-url</code>","text":"<ul> <li>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: <code>url</code> </li> <li>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery <code>parse_url_tasks</code>.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>task_id</code>.</li> </ul>"},{"location":"lab3/#post-parse-all","title":"<code>POST /parse-all</code>","text":"<ul> <li>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 Celery <code>parse_all_urls</code>.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>task_id</code>.</li> </ul>"},{"location":"lab3/#get-task-statustask_id","title":"<code>GET /task-status/{task_id}</code>","text":"<ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 Celery \u043f\u043e <code>task_id</code>.</li> <li>\u0415\u0441\u043b\u0438 \u0433\u043e\u0442\u043e\u0432\u043e \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>status: completed</code> \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</li> <li>\u0415\u0441\u043b\u0438 \u0435\u0449\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>status: pending</code>.</li> </ul>"},{"location":"lab3/#_2","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 <code>asyncio</code> \u0438 <code>httpx</code>.</li> <li>Celery \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Redis \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0438 backend.</li> <li>\u041f\u0430\u0440\u0441\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 API.</li> </ul>"}]}